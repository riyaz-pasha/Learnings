{"appState":{"viewBackgroundColor":"#ffffff"},"source":"https:\/\/excalidraw.com","type":"excalidraw","files":{},"elements":[{"x":661,"isDeleted":false,"y":84,"strokeStyle":"solid","verticalAlign":"top","angle":0,"type":"text","roughness":1,"index":"a0","backgroundColor":"transparent","fontSize":36,"version":44,"boundElements":[],"versionNonce":1589314656,"fillStyle":"solid","opacity":100,"lineHeight":1.15,"originalText":"Google Maps","strokeWidth":2,"locked":false,"height":41.4,"width":199.36798095703125,"groupIds":[],"fontFamily":7,"id":"Db5BdFf3PypHkryim9m3v","text":"Google Maps","updated":1757690354408,"textAlign":"left","seed":1695263840,"strokeColor":"#1e1e1e","autoResize":true},{"x":324,"isDeleted":false,"y":281,"strokeStyle":"solid","verticalAlign":"top","angle":0,"type":"text","roughness":1,"index":"a1","backgroundColor":"transparent","fontSize":20,"version":1753,"boundElements":[],"versionNonce":2133119072,"fillStyle":"solid","opacity":100,"lineHeight":1.25,"originalText":"1. Data Ingestion\n\n* Data can from many systems in various formats\n* Image and other information from satellites\n* From open source tools like OpenStreetMap(OSM) (contributed by users)\n* Government organizations \n* Businesses\n* Live sensor data\n\nFor example\n- From OSM data might look like this\n  Node (n1:{lat1,lon1},n2:{lat2:lon2},n3:{lat3:lon3})\n  Way  ( w1:{ n1,n2, name, road\/building, …metadata}, w2:{n2,n3, name, road\/building})\n\n- Point Of Interest(POI) information such as restaurants, comapanies, gas stations, parks, schools etc.\n  this can be added by users, businesses, admins or scraping through the internet.\n  [\n    {name, category, lat, long, …metadata}\n  ]\n\n- GPS pings from user\n  [{device,user,lat,lon,speed_kmph}]\n\n* Once we have this data next step is to clean and validate the data\n** Normalization: “Church St” -> “Church Street”\n** De duplication: remove duplicate entries\n\n* The we will build node and edges information out of it.\n* This will be stored in the database.\n\n* From satellites we will get images and sensory information.\n* For example each pixel has some information like which lat, lon it belongs to.\n  what’s its resolution etc. (GeoTIFF)\n* Once we recieved the image and oth information we perform certail operations like\n  correction and echancements.\n* Later we will feed to ML AI model to extract features like rods, buildings etc.\n* As each pixel has lat and lon we also know the boundaries so for roads we can extract lines\n  builds polygons, etc.\n* Then we update this information in the database.\n\n\n\n  \n  \n\n","strokeWidth":2,"locked":false,"height":1150,"width":1133,"groupIds":[],"fontFamily":8,"id":"bxNiopdvFOa84ln7HFhiH","text":"1. Data Ingestion\n\n* Data can from many systems in various formats\n* Image and other information from satellites\n* From open source tools like OpenStreetMap(OSM) (contributed by users)\n* Government organizations \n* Businesses\n* Live sensor data\n\nFor example\n- From OSM data might look like this\n  Node (n1:{lat1,lon1},n2:{lat2:lon2},n3:{lat3:lon3})\n  Way  ( w1:{ n1,n2, name, road\/building, …metadata}, w2:{n2,n3, name, road\/building})\n\n- Point Of Interest(POI) information such as restaurants, comapanies, gas stations, parks, schools etc.\n  this can be added by users, businesses, admins or scraping through the internet.\n  [\n    {name, category, lat, long, …metadata}\n  ]\n\n- GPS pings from user\n  [{device,user,lat,lon,speed_kmph}]\n\n* Once we have this data next step is to clean and validate the data\n** Normalization: “Church St” -> “Church Street”\n** De duplication: remove duplicate entries\n\n* The we will build node and edges information out of it.\n* This will be stored in the database.\n\n* From satellites we will get images and sensory information.\n* For example each pixel has some information like which lat, lon it belongs to.\n  what’s its resolution etc. (GeoTIFF)\n* Once we recieved the image and oth information we perform certail operations like\n  correction and echancements.\n* Later we will feed to ML AI model to extract features like rods, buildings etc.\n* As each pixel has lat and lon we also know the boundaries so for roads we can extract lines\n  builds polygons, etc.\n* Then we update this information in the database.\n\n\n\n  \n  \n\n","updated":1757692373090,"textAlign":"left","seed":795625568,"strokeColor":"#1e1e1e","autoResize":true},{"x":322.6839904785156,"isDeleted":false,"y":1445.568408203125,"strokeStyle":"solid","verticalAlign":"top","angle":0,"type":"text","roughness":1,"index":"a2","backgroundColor":"transparent","fontSize":20,"version":2434,"versionNonce":64623733,"fillStyle":"solid","opacity":100,"lineHeight":1.25,"originalText":"2. Routing Service\n\n* User wants to find path between source location and destination location.\n* Request lands on the Routing service through API gateway.\n* The job of the routing service is to return best possible path considering various factors.\n* For that it need some data\n* We were already storing nodes \n  Node (id, lat, lon, ….metadata)\n* We also needs to store connections between these nodes which are nothing but road segements.\n  Edge (id, sourceNode, destinationNode, distance, avgTime, speedLimit, isOneWay, … metadata )\n\n* For example user reqested path from street1 to street2 in same city\n* We first fetch source and destination nodes and also fetch adjacentNodes.\n* We then run Dijkstra’s algorithm to find best path\n* Return it to the client\n\n* If user request path from city1 to city2 then we it’s ineficient to find this query\n* What we can do is we can create multiple levels of graphs L1,L2,L3.\n* This way we can resolve queries much faster.\n\n* In L1 we store all the roads.\n* In L2 maybe we can store all the path which connects cities within a state.\n  For example if Hyderabad->warangal, Hyderbad->Karimanagat etc. Maybe we maintain State highway and\n  create some shortcut routes between popular cities within some distance range.\n* In L3 maybe we can store all the paths which connects states and countries.\n  Telangana->Karnataka, Telangana->AndhraPradesh , India -> Bangladesh etc.\n\n* For example if request came to find road between Hyderbad to karimanagr.\n  Then we first go through the L1 graph and fetch nodes of start and end.\n  We find distance and as this is less than 250km we mostly use L1 and L2\n\n* We first run A* on L1 to find entry nodes on L2\n* Similary run with destination node to fins exit nodes on L2\n* Then run algorithm to find distance on the L2 nodes.\n\n* For example if request came to find road between Hyderbad to Banglore.\n* Fetches source and destination nodes and founds out which has distance more than 500km\n  and across multiple states.\n* We first finds nearest nodes on entry nodes from source point on L1 which are on L3.\n* Similarly exit nodes which are closer to destination nodes.\n* Then we find the path.\n\n\n","strokeWidth":2,"locked":false,"height":1100,"width":1100,"groupIds":[],"fontFamily":8,"id":"P8htjhxr-yN7NdYpmd2kl","text":"2. Routing Service\n\n* User wants to find path between source location and destination location.\n* Request lands on the Routing service through API gateway.\n* The job of the routing service is to return best possible path considering various factors.\n* For that it need some data\n* We were already storing nodes \n  Node (id, lat, lon, ….metadata)\n* We also needs to store connections between these nodes which are nothing but road segements.\n  Edge (id, sourceNode, destinationNode, distance, avgTime, speedLimit, isOneWay, … metadata )\n\n* For example user reqested path from street1 to street2 in same city\n* We first fetch source and destination nodes and also fetch adjacentNodes.\n* We then run Dijkstra’s algorithm to find best path\n* Return it to the client\n\n* If user request path from city1 to city2 then we it’s ineficient to find this query\n* What we can do is we can create multiple levels of graphs L1,L2,L3.\n* This way we can resolve queries much faster.\n\n* In L1 we store all the roads.\n* In L2 maybe we can store all the path which connects cities within a state.\n  For example if Hyderabad->warangal, Hyderbad->Karimanagat etc. Maybe we maintain State highway and\n  create some shortcut routes between popular cities within some distance range.\n* In L3 maybe we can store all the paths which connects states and countries.\n  Telangana->Karnataka, Telangana->AndhraPradesh , India -> Bangladesh etc.\n\n* For example if request came to find road between Hyderbad to karimanagr.\n  Then we first go through the L1 graph and fetch nodes of start and end.\n  We find distance and as this is less than 250km we mostly use L1 and L2\n\n* We first run A* on L1 to find entry nodes on L2\n* Similary run with destination node to fins exit nodes on L2\n* Then run algorithm to find distance on the L2 nodes.\n\n* For example if request came to find road between Hyderbad to Banglore.\n* Fetches source and destination nodes and founds out which has distance more than 500km\n  and across multiple states.\n* We first finds nearest nodes on entry nodes from source point on L1 which are on L3.\n* Similarly exit nodes which are closer to destination nodes.\n* Then we find the path.\n\n\n","updated":1757759235978,"textAlign":"left","seed":562596213,"strokeColor":"#1e1e1e","autoResize":true}],"version":2}
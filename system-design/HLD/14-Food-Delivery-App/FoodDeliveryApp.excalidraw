{"version":2,"files":{},"elements":[{"groupIds":[],"version":25,"index":"b3b","boundElements":[],"seed":321574632,"fontFamily":8,"versionNonce":1145983768,"x":682,"autoResize":true,"fillStyle":"solid","opacity":100,"updated":1757340076851,"verticalAlign":"top","id":"yYWWntprQtIoxIgrCVv7D","roughness":1,"text":"Food Delivery App","width":336.5999755859375,"y":87,"backgroundColor":"transparent","strokeStyle":"solid","textAlign":"left","height":45,"type":"text","angle":0,"lineHeight":1.25,"locked":false,"fontSize":36,"strokeWidth":2,"originalText":"Food Delivery App","strokeColor":"#1e1e1e","isDeleted":false},{"groupIds":[],"version":1183,"index":"b3c","boundElements":[],"seed":504438168,"fontFamily":8,"versionNonce":751176296,"x":242,"autoResize":true,"fillStyle":"solid","opacity":100,"updated":1757340076851,"verticalAlign":"top","id":"80h1CSYkgaJK2BEXfPgsw","roughness":1,"text":"1. Restaurant Registration\n\n- Restaurants have a dedicated app to do signup and register themselves in the app\n  POST \/restaurants\n  { name, logo, description, address, contact details, licenseNumber, gst, …metadata }\n\n- Request lands on the Restaurant service and this will save information in the db\n  Restaurant { id, status:online\/offline, name, logo, description, address, contact details, licenseNumber, gst, …metadata }\n- Logo will be saved in the blob storage and in data base we will store \n\n- Similarly we will have other apis to get, update, delete restaurants.\n\n- Restaraunts cal also update thier status and other details using below api.\n  PUT \/restaurants\/{id}\n\n2. Menu\n\n- Restaurants can create menu and add, update, delete items.\n  POST \/restaurants\/{id}\/menu\n  { items: [{name,description, ingredients, imageUrl, price, \n             type:veg\/nonveg,\n             category: breakfast\/lunch\/dinner\/desserts,\n            }] }\n\n- This request also comes to the Restarant Service and creates record in the \n  Menu table.\n  Menu ( restId, items: items )\n  MenuItem: {all sent in the payload, status:available\/outOfStock}\n\n- Restaraunts cal also update status and other details using below api.\n  PUT \/restaurants\/{id}\/menu\/{itemId}","width":1364,"y":265,"backgroundColor":"transparent","strokeStyle":"solid","textAlign":"left","height":775,"type":"text","angle":0,"lineHeight":1.25,"locked":false,"fontSize":20,"strokeWidth":2,"originalText":"1. Restaurant Registration\n\n- Restaurants have a dedicated app to do signup and register themselves in the app\n  POST \/restaurants\n  { name, logo, description, address, contact details, licenseNumber, gst, …metadata }\n\n- Request lands on the Restaurant service and this will save information in the db\n  Restaurant { id, status:online\/offline, name, logo, description, address, contact details, licenseNumber, gst, …metadata }\n- Logo will be saved in the blob storage and in data base we will store \n\n- Similarly we will have other apis to get, update, delete restaurants.\n\n- Restaraunts cal also update thier status and other details using below api.\n  PUT \/restaurants\/{id}\n\n2. Menu\n\n- Restaurants can create menu and add, update, delete items.\n  POST \/restaurants\/{id}\/menu\n  { items: [{name,description, ingredients, imageUrl, price, \n             type:veg\/nonveg,\n             category: breakfast\/lunch\/dinner\/desserts,\n            }] }\n\n- This request also comes to the Restarant Service and creates record in the \n  Menu table.\n  Menu ( restId, items: items )\n  MenuItem: {all sent in the payload, status:available\/outOfStock}\n\n- Restaraunts cal also update status and other details using below api.\n  PUT \/restaurants\/{id}\/menu\/{itemId}","strokeColor":"#1e1e1e","isDeleted":false},{"groupIds":[],"version":820,"index":"b3d","boundElements":[],"seed":878060952,"fontFamily":8,"versionNonce":1917071384,"x":227.80483144088748,"autoResize":true,"fillStyle":"solid","opacity":100,"updated":1757340076851,"verticalAlign":"top","id":"h8I-oYY5WWgOpRFc9xv8Z","roughness":1,"text":"3. User home screen.\n\n- When user opens the app we captures users location (lat,long) and make a request to the\n  search service\n  GET \/search\/restarants\/nearyby?{lat,long}\n\n- Inorder to Search service find restarants nearby we need an effective search mechanism.\n- Whenever a new restaurant is onboarded or updated an event is published to the message queue.\n- Ingestion worker will consume this event and updates the search indexes (tf-idf) (we can also use elastic search here).\n- Search service will talk to the elastic search and fetches restaurants in nearby 5-10KM radius.\n- This data will be shown to the user on the app.\n\n- Users can also search for specific restaurants or dishes and our search service is capable of handling it\n  using elastic search.\n\n","width":1331,"y":1211.6848182102915,"backgroundColor":"transparent","strokeStyle":"solid","textAlign":"left","height":400,"type":"text","angle":0,"lineHeight":1.25,"locked":false,"fontSize":20,"strokeWidth":2,"originalText":"3. User home screen.\n\n- When user opens the app we captures users location (lat,long) and make a request to the\n  search service\n  GET \/search\/restarants\/nearyby?{lat,long}\n\n- Inorder to Search service find restarants nearby we need an effective search mechanism.\n- Whenever a new restaurant is onboarded or updated an event is published to the message queue.\n- Ingestion worker will consume this event and updates the search indexes (tf-idf) (we can also use elastic search here).\n- Search service will talk to the elastic search and fetches restaurants in nearby 5-10KM radius.\n- This data will be shown to the user on the app.\n\n- Users can also search for specific restaurants or dishes and our search service is capable of handling it\n  using elastic search.\n\n","strokeColor":"#1e1e1e","isDeleted":false},{"groupIds":[],"version":426,"index":"b3e","boundElements":[],"seed":1396312728,"fontFamily":8,"versionNonce":1734901096,"x":230.3150561603154,"autoResize":true,"fillStyle":"solid","opacity":100,"updated":1757340076851,"verticalAlign":"top","id":"BP4rp3rojljATe6wOy8qG","roughness":1,"text":"4. Cart creation\/updation\/deletion\n\n- User selected a restaurant and added and item to the cart(creates new cart). \n  \/POST \/cart\n  {restaurantId,userId,itemId}\n\n- Request lands on the cart service.\n- cart service first check if item is still available or not. if it’s available then it adds to the cart\n  if not returns error to the client\n  Cart (id, restaurantId,userId,items:[itemIds],…metadata)\n","width":1144,"y":1689.1265415352414,"backgroundColor":"transparent","strokeStyle":"solid","textAlign":"left","height":275,"type":"text","angle":0,"lineHeight":1.25,"locked":false,"fontSize":20,"strokeWidth":2,"originalText":"4. Cart creation\/updation\/deletion\n\n- User selected a restaurant and added and item to the cart(creates new cart). \n  \/POST \/cart\n  {restaurantId,userId,itemId}\n\n- Request lands on the cart service.\n- cart service first check if item is still available or not. if it’s available then it adds to the cart\n  if not returns error to the client\n  Cart (id, restaurantId,userId,items:[itemIds],…metadata)\n","strokeColor":"#1e1e1e","isDeleted":false},{"groupIds":[],"version":1474,"index":"b3f","seed":1671298664,"fontFamily":8,"versionNonce":1142407528,"x":224.4210229536002,"autoResize":true,"fillStyle":"solid","opacity":100,"updated":1757340900145,"verticalAlign":"top","id":"hOjrFrWSK_FxLJOgHFJMy","roughness":1,"text":"5. Checkout\n\n- User clicks in proceed to checkout page and lands on checkout summary page\n  where we show final price and all\n  GET \/checkout\/summary?{cartId}\n\n- Checkout service will first checks if all the items are available or not and final pricing of\n  it. It then returns summary of all the items and amount to pay after all fees and offers.\n- User sees these details and clicks on proceed\n  POST \/checkout\n  {cartId}\n- Checkout service \n- Checkout service will lock the cart and will create entry in the order table with payment pending status.\n- and calls the payment gateway (for eg stripe) with (amount,currency,orderId,returnUrl,…metadata)\n  and creates a payment intent.\n- payment gateway returns (paymentIntentId, clientSecret) and these are retured to the user.\n\n- Users device uses this paymetIntentId and clientSecret and mounts payment details component.\n- Once user finished the payment process payment gateway returs some code to the user device.\n- We can forward this code to the checkout service to confirm payment status and update order record with\n  payment success\/failed.\n- Optionally we can use alternave approach like instead of depending on clients code we can listen\n  webhook events from payment gateway to confirm payment status.\n\n- Finally user lands on the payment success screen.\n  ","width":1177,"y":2062.606628680116,"backgroundColor":"transparent","strokeStyle":"solid","textAlign":"left","height":650,"type":"text","angle":0,"lineHeight":1.25,"locked":false,"fontSize":20,"strokeWidth":2,"originalText":"5. Checkout\n\n- User clicks in proceed to checkout page and lands on checkout summary page\n  where we show final price and all\n  GET \/checkout\/summary?{cartId}\n\n- Checkout service will first checks if all the items are available or not and final pricing of\n  it. It then returns summary of all the items and amount to pay after all fees and offers.\n- User sees these details and clicks on proceed\n  POST \/checkout\n  {cartId}\n- Checkout service \n- Checkout service will lock the cart and will create entry in the order table with payment pending status.\n- and calls the payment gateway (for eg stripe) with (amount,currency,orderId,returnUrl,…metadata)\n  and creates a payment intent.\n- payment gateway returns (paymentIntentId, clientSecret) and these are retured to the user.\n\n- Users device uses this paymetIntentId and clientSecret and mounts payment details component.\n- Once user finished the payment process payment gateway returs some code to the user device.\n- We can forward this code to the checkout service to confirm payment status and update order record with\n  payment success\/failed.\n- Optionally we can use alternave approach like instead of depending on clients code we can listen\n  webhook events from payment gateway to confirm payment status.\n\n- Finally user lands on the payment success screen.\n  ","strokeColor":"#1e1e1e","isDeleted":false},{"groupIds":[],"version":1153,"index":"b3g","seed":1835524120,"fontFamily":8,"versionNonce":581461608,"x":231.15989167818987,"autoResize":true,"fillStyle":"solid","opacity":100,"updated":1757341766957,"verticalAlign":"top","id":"f930O5XWhxcaXlxwjMPTF","roughness":1,"text":"6. Order\n\n- After payment gateway confirms that payment is successful\n  then we publish an event to the message queue \n  order.payment.success (orderId, paymentId,userId,…metadata)\n\n- Restarant order worker will listen to this event and notifies the restaraunt about\n  the order.\n- This can be done using websockets\/short-polling\/notifications.\n\n- Then restaraunt decides to confirm\/cancel order.\n  if they confirms the order then we publish a message\n  order.restaraunt.confirmed event \n\n- This event will be listened by the develivery partner matching worker\n  and assigns it.\n- delivery partner matching worker query the db and fetched 20-30 partners within 5-10km\n  radius.\n- then notifies 3-5 partners at a time and whoever accepts first will gets assigned to that order.\n- then order.deliverypartner.assigned event will be published.\n\n- This delivey partners location updates will be listened by other deliver partner\n  location workers and these are stored in location database like redis.\n\n\n","width":1078,"y":2817.7109676932896,"backgroundColor":"transparent","strokeStyle":"solid","textAlign":"left","height":650,"type":"text","angle":0,"lineHeight":1.25,"locked":false,"fontSize":20,"strokeWidth":2,"originalText":"6. Order\n\n- After payment gateway confirms that payment is successful\n  then we publish an event to the message queue \n  order.payment.success (orderId, paymentId,userId,…metadata)\n\n- Restarant order worker will listen to this event and notifies the restaraunt about\n  the order.\n- This can be done using websockets\/short-polling\/notifications.\n\n- Then restaraunt decides to confirm\/cancel order.\n  if they confirms the order then we publish a message\n  order.restaraunt.confirmed event \n\n- This event will be listened by the develivery partner matching worker\n  and assigns it.\n- delivery partner matching worker query the db and fetched 20-30 partners within 5-10km\n  radius.\n- then notifies 3-5 partners at a time and whoever accepts first will gets assigned to that order.\n- then order.deliverypartner.assigned event will be published.\n\n- This delivey partners location updates will be listened by other deliver partner\n  location workers and these are stored in location database like redis.\n\n\n","strokeColor":"#1e1e1e","isDeleted":false}],"appState":{"viewBackgroundColor":"#ffffff"},"type":"excalidraw","source":"https:\/\/excalidraw.com"}